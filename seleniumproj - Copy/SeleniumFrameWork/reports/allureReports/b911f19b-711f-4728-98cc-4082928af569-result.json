{"name": "test_navigate", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <SeleniumFrameWork.pages.navigation_burger.BurgerMenu object at 0x000001F709412890>, locatorValue = 'bm-burger-button', locatorType = 'class'\n\n    def waitForElement(self, locatorValue, locatorType=\"id\"):\n        webElement = None\n        try:\n            locatorType = locatorType.lower()\n            locatorByType = self.getLocatorType(locatorType)\n            wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                                 ignored_exceptions=[ElementNotVisibleException, NoSuchElementException])\n>           webElement = wait.until(ec.presence_of_element_located((locatorByType, locatorValue)))\n\n..\\base\\BasePage.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8d9ef16ecd1bb1cbc080d290ab323703\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001F70BDEAC00>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6AAA72142+3514994]\nE       \t(No symbol) [0x00007FF6AA690CE2]\nE       \t(No symbol) [0x00007FF6AA5376AA]\nE       \t(No symbol) [0x00007FF6AA581860]\nE       \t(No symbol) [0x00007FF6AA58197C]\nE       \t(No symbol) [0x00007FF6AA5C4EE7]\nE       \t(No symbol) [0x00007FF6AA5A602F]\nE       \t(No symbol) [0x00007FF6AA5C28F6]\nE       \t(No symbol) [0x00007FF6AA5A5D93]\nE       \t(No symbol) [0x00007FF6AA574BDC]\nE       \t(No symbol) [0x00007FF6AA575C64]\nE       \tGetHandleVerifier [0x00007FF6AAA9E16B+3695259]\nE       \tGetHandleVerifier [0x00007FF6AAAF6737+4057191]\nE       \tGetHandleVerifier [0x00007FF6AAAEE4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF6AA7C04F9+689705]\nE       \t(No symbol) [0x00007FF6AA69C048]\nE       \t(No symbol) [0x00007FF6AA698044]\nE       \t(No symbol) [0x00007FF6AA6981C9]\nE       \t(No symbol) [0x00007FF6AA6888C4]\nE       \tBaseThreadInitThunk [0x00007FFC9EA7257D+29]\nE       \tRtlUserThreadStart [0x00007FFC9ED2AA58+40]\n\n..\\..\\..\\..\\python-selenium-venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <SeleniumFrameWork.pages.navigation_burger.BurgerMenu object at 0x000001F709412890>, locatorValue = 'bm-burger-button', locatorType = 'class'\n\n    def clickOnElement(self, locatorValue, locatorType=\"id\"):\n        try:\n            locatorType = locatorType.lower()\n>           webElement = self.waitForElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SeleniumFrameWork.pages.navigation_burger.BurgerMenu object at 0x000001F709412890>, locatorValue = 'bm-burger-button', locatorType = 'class'\n\n    def waitForElement(self, locatorValue, locatorType=\"id\"):\n        webElement = None\n        try:\n            locatorType = locatorType.lower()\n            locatorByType = self.getLocatorType(locatorType)\n            wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                                 ignored_exceptions=[ElementNotVisibleException, NoSuchElementException])\n            webElement = wait.until(ec.presence_of_element_located((locatorByType, locatorValue)))\n            self.log.info(\"WebElement found with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n        except:\n            self.log.error(\n                \"WebElement not found with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n            print_stack()\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:79: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <SeleniumFrameWork.tests.test_burgermenu.BurgerMenuTest testMethod=test_navigate>\n\n    @pytest.mark.run(order=2)\n    def test_navigate(self):\n        time.sleep(1)\n>       self.bm.navigate_to_burger_menu()\n\ntest_burgermenu.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\navigation_burger.py:32: in navigate_to_burger_menu\n    self.clickOnElement(self._navigate, \"class\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SeleniumFrameWork.pages.navigation_burger.BurgerMenu object at 0x000001F709412890>, locatorValue = 'bm-burger-button', locatorType = 'class'\n\n    def clickOnElement(self, locatorValue, locatorType=\"id\"):\n        try:\n            locatorType = locatorType.lower()\n            webElement = self.waitForElement(locatorValue, locatorType)\n            webElement.click()\n            self.log.info(\n                \"Clicked on WebElement with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n        except:\n            self.log.error(\n                \"Unable to Click on WebElement with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n            print_stack()\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:93: AssertionError"}, "attachments": [{"name": "log", "source": "120f9c8f-5d52-4dde-9f86-c8b8bf96ca8e-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "30d1bdb1-6442-4b53-aca7-bf7f56845e17-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "e636919e-cb48-440c-a1d8-f944f3220806-attachment.txt", "type": "text/plain"}], "start": 1705388083976, "stop": 1705388110725, "uuid": "e6852868-e819-4294-bdc9-a2e696942508", "historyId": "d2899eff282166402121568a039cbe0a", "testCaseId": "d2899eff282166402121568a039cbe0a", "fullName": "TestSuite.BurgerMenuTest#test_navigate", "labels": [{"name": "tag", "value": "run(order=2)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'beforeMethod')"}, {"name": "suite", "value": "TestSuite"}, {"name": "subSuite", "value": "BurgerMenuTest"}, {"name": "host", "value": "GESLLR0D3LS8"}, {"name": "thread", "value": "1620-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestSuite"}]}
{"name": "test_selectFilterZ_A", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <SeleniumFrameWork.pages.filterpage2.Filter_Dropdown object at 0x000002C98D268290>, locatorValue = 'product_sort_container'\nlocatorType = 'class'\n\n    def waitForElement(self, locatorValue, locatorType=\"id\"):\n        webElement = None\n        try:\n            locatorType = locatorType.lower()\n            locatorByType = self.getLocatorType(locatorType)\n            wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                                 ignored_exceptions=[ElementNotVisibleException, NoSuchElementException])\n>           webElement = wait.until(ec.presence_of_element_located((locatorByType, locatorValue)))\n\n..\\base\\BasePage.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"617d21253fa9fb44979c8df94e9889d9\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000002C98D620EA0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\n..\\..\\..\\..\\python-selenium-venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"617d21253fa9fb44979c8df94e9889d9\")>\n\n    def _predicate(driver: WebDriverOrWebElement):\n>       return driver.find_element(*locator)\n\n..\\..\\..\\..\\python-selenium-venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"617d21253fa9fb44979c8df94e9889d9\")>, by = 'css selector'\nvalue = '.product_sort_container'\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n..\\..\\..\\..\\python-selenium-venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"617d21253fa9fb44979c8df94e9889d9\")>, driver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '.product_sort_container'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\..\\python-selenium-venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C98D26AB90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7638C88C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC9EA7257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC9ED2AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=120.0.6099.217)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF763CB2142+3514994]\nE       \t(No symbol) [0x00007FF7638D0CE2]\nE       \t(No symbol) [0x00007FF7637776AA]\nE       \t(No symbol) [0x00007FF763750AFD]\nE       \t(No symbol) [0x00007FF7637ECB1B]\nE       \t(No symbol) [0x00007FF76380218F]\nE       \t(No symbol) [0x00007FF7637E5D93]\nE       \t(No symbol) [0x00007FF7637B4BDC]\nE       \t(No symbol) [0x00007FF7637B5C64]\nE       \tGetHandleVerifier [0x00007FF763CDE16B+3695259]\nE       \tGetHandleVerifier [0x00007FF763D36737+4057191]\nE       \tGetHandleVerifier [0x00007FF763D2E4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF763A004F9+689705]\nE       \t(No symbol) [0x00007FF7638DC048]\nE       \t(No symbol) [0x00007FF7638D8044]\nE       \t(No symbol) [0x00007FF7638D81C9]\nE       \t(No symbol) [0x00007FF7638C88C4]\nE       \tBaseThreadInitThunk [0x00007FFC9EA7257D+29]\nE       \tRtlUserThreadStart [0x00007FFC9ED2AA58+40]\n\n..\\..\\..\\..\\python-selenium-venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <SeleniumFrameWork.pages.filterpage2.Filter_Dropdown object at 0x000002C98D268290>, locatorValue = 'product_sort_container'\noption_text = 'Name (A to Z)', locatorType = 'class'\n\n    def selectDropdownOption(self, locatorValue, option_text, locatorType=\"id\"):\n        try:\n            locatorType = locatorType.lower()\n>           select_element = Select(self.waitForElement(locatorValue, locatorType))\n\n..\\base\\BasePage.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <SeleniumFrameWork.pages.filterpage2.Filter_Dropdown object at 0x000002C98D268290>, locatorValue = 'product_sort_container'\nlocatorType = 'class'\n\n    def waitForElement(self, locatorValue, locatorType=\"id\"):\n        webElement = None\n        try:\n            locatorType = locatorType.lower()\n            locatorByType = self.getLocatorType(locatorType)\n            wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                                 ignored_exceptions=[ElementNotVisibleException, NoSuchElementException])\n            webElement = wait.until(ec.presence_of_element_located((locatorByType, locatorValue)))\n            self.log.info(\"WebElement found with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n        except:\n            self.log.error(\n                \"WebElement not found with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n            print_stack()\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:79: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <SeleniumFrameWork.tests.test_filter2.FilterDropdownTest testMethod=test_selectFilterZ_A>\n\n    @pytest.mark.run(order=3)\n    def test_selectFilterZ_A(self):\n        time.sleep(5)\n>       self.fd.clickFilterZ_A()\n\ntest_filter2.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\filterpage2.py:80: in clickFilterZ_A\n    self.selectDropdownOption(self._filter,\"Name (A to Z)\",\"class\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <SeleniumFrameWork.pages.filterpage2.Filter_Dropdown object at 0x000002C98D268290>, locatorValue = 'product_sort_container'\noption_text = 'Name (A to Z)', locatorType = 'class'\n\n    def selectDropdownOption(self, locatorValue, option_text, locatorType=\"id\"):\n        try:\n            locatorType = locatorType.lower()\n            select_element = Select(self.waitForElement(locatorValue, locatorType))\n            select_element.select_by_visible_text(option_text)\n            self.log.info(\n                f\"Selected dropdown option '{option_text}' with locator value {locatorValue} using locatorType {locatorType}\")\n        except:\n            self.log.error(\n                f\"Unable to select dropdown option '{option_text}' with locator value {locatorValue} using locatorType {locatorType}\")\n            print_stack()\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:164: AssertionError"}, "attachments": [{"name": "log", "source": "d6921b35-f5ad-4e2e-9291-bd745147c0f3-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "4b55417e-8b79-4738-b5e5-513895514dcd-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "76528848-c22d-4744-8299-6e279a709ec2-attachment.txt", "type": "text/plain"}], "start": 1705470466629, "stop": 1705470477012, "uuid": "cb4232d6-1502-4a75-a5b9-b6cccbb73f0a", "historyId": "a41557ecce520f82ebf1fafd2d6d09e1", "testCaseId": "a41557ecce520f82ebf1fafd2d6d09e1", "fullName": "TestSuite.FilterDropdownTest#test_selectFilterZ_A", "labels": [{"name": "tag", "value": "run(order=3)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'beforeMethod')"}, {"name": "suite", "value": "TestSuite"}, {"name": "subSuite", "value": "FilterDropdownTest"}, {"name": "host", "value": "GESLLR0D3LS8"}, {"name": "thread", "value": "18552-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestSuite"}]}
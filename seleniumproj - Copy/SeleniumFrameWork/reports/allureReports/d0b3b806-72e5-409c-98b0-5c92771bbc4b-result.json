{"name": "test_selectFilterZ_A", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <SeleniumFrameWork.pages.filterpage2.Filter_Dropdown object at 0x0000014CB0F16050>, locatorValue = 'product_sort_container'\nlocatorType = 'class'\n\n    def waitForElement(self, locatorValue, locatorType=\"id\"):\n        webElement = None\n        try:\n            locatorType = locatorType.lower()\n            locatorByType = self.getLocatorType(locatorType)\n            wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                                 ignored_exceptions=[ElementNotVisibleException, NoSuchElementException])\n>           webElement = wait.until(ec.presence_of_element_located((locatorByType, locatorValue)))\n\n..\\base\\BasePage.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a0fae647996ef4349d61928e3a818233\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x0000014CB0F6A660>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF763CB2142+3514994]\nE       \t(No symbol) [0x00007FF7638D0CE2]\nE       \t(No symbol) [0x00007FF7637776AA]\nE       \t(No symbol) [0x00007FF7637C1860]\nE       \t(No symbol) [0x00007FF7637C197C]\nE       \t(No symbol) [0x00007FF763804EE7]\nE       \t(No symbol) [0x00007FF7637E602F]\nE       \t(No symbol) [0x00007FF7638028F6]\nE       \t(No symbol) [0x00007FF7637E5D93]\nE       \t(No symbol) [0x00007FF7637B4BDC]\nE       \t(No symbol) [0x00007FF7637B5C64]\nE       \tGetHandleVerifier [0x00007FF763CDE16B+3695259]\nE       \tGetHandleVerifier [0x00007FF763D36737+4057191]\nE       \tGetHandleVerifier [0x00007FF763D2E4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF763A004F9+689705]\nE       \t(No symbol) [0x00007FF7638DC048]\nE       \t(No symbol) [0x00007FF7638D8044]\nE       \t(No symbol) [0x00007FF7638D81C9]\nE       \t(No symbol) [0x00007FF7638C88C4]\nE       \tBaseThreadInitThunk [0x00007FFC9EA7257D+29]\nE       \tRtlUserThreadStart [0x00007FFC9ED2AA58+40]\n\n..\\..\\..\\..\\python-selenium-venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <SeleniumFrameWork.pages.filterpage2.Filter_Dropdown object at 0x0000014CB0F16050>, locatorValue = 'product_sort_container'\noption_text = 'Name (A to Z)', locatorType = 'class'\n\n    def selectDropdownOption(self, locatorValue, option_text, locatorType=\"id\"):\n        try:\n            locatorType = locatorType.lower()\n>           select_element = Select(self.waitForElement(locatorValue, locatorType))\n\n..\\base\\BasePage.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <SeleniumFrameWork.pages.filterpage2.Filter_Dropdown object at 0x0000014CB0F16050>, locatorValue = 'product_sort_container'\nlocatorType = 'class'\n\n    def waitForElement(self, locatorValue, locatorType=\"id\"):\n        webElement = None\n        try:\n            locatorType = locatorType.lower()\n            locatorByType = self.getLocatorType(locatorType)\n            wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                                 ignored_exceptions=[ElementNotVisibleException, NoSuchElementException])\n            webElement = wait.until(ec.presence_of_element_located((locatorByType, locatorValue)))\n            self.log.info(\"WebElement found with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n        except:\n            self.log.error(\n                \"WebElement not found with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n            print_stack()\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:79: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <SeleniumFrameWork.tests.test_filter2.FilterDropdownTest testMethod=test_selectFilterZ_A>\n\n    @pytest.mark.run(order=3)\n    def test_selectFilterZ_A(self):\n        time.sleep(5)\n>       self.fd.clickFilterZ_A()\n\ntest_filter2.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\filterpage2.py:80: in clickFilterZ_A\n    self.selectDropdownOption(self._filter,\"Name (A to Z)\",\"class\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <SeleniumFrameWork.pages.filterpage2.Filter_Dropdown object at 0x0000014CB0F16050>, locatorValue = 'product_sort_container'\noption_text = 'Name (A to Z)', locatorType = 'class'\n\n    def selectDropdownOption(self, locatorValue, option_text, locatorType=\"id\"):\n        try:\n            locatorType = locatorType.lower()\n            select_element = Select(self.waitForElement(locatorValue, locatorType))\n            select_element.select_by_visible_text(option_text)\n            self.log.info(\n                f\"Selected dropdown option '{option_text}' with locator value {locatorValue} using locatorType {locatorType}\")\n        except:\n            self.log.error(\n                f\"Unable to select dropdown option '{option_text}' with locator value {locatorValue} using locatorType {locatorType}\")\n            print_stack()\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:164: AssertionError"}, "attachments": [{"name": "log", "source": "687e70a5-64b4-4722-93c9-4c6d4c91c800-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "edc0bb3a-ba87-415a-942a-ce3c2f117a39-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "48d31d82-afbd-41f1-b210-6cbc6555361d-attachment.txt", "type": "text/plain"}], "start": 1705470781874, "stop": 1705470811945, "uuid": "12c58810-f3cc-42f7-a76b-565ae55ec4c9", "historyId": "a41557ecce520f82ebf1fafd2d6d09e1", "testCaseId": "a41557ecce520f82ebf1fafd2d6d09e1", "fullName": "TestSuite.FilterDropdownTest#test_selectFilterZ_A", "labels": [{"name": "tag", "value": "run(order=3)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'beforeMethod')"}, {"name": "suite", "value": "TestSuite"}, {"name": "subSuite", "value": "FilterDropdownTest"}, {"name": "host", "value": "GESLLR0D3LS8"}, {"name": "thread", "value": "3664-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestSuite"}]}
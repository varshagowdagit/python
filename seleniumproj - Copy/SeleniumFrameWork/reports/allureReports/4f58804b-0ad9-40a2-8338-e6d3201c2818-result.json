{"name": "test_ClickUserName", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <SeleniumFrameWork.pages.checkoutPage.Checkout object at 0x000001F1939A5B10>, locatorValue = 'finish', locatorType = 'id'\n\n    def waitForElement(self, locatorValue, locatorType=\"id\"):\n        webElement = None\n        try:\n            locatorType = locatorType.lower()\n            locatorByType = self.getLocatorType(locatorType)\n            wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                                 ignored_exceptions=[ElementNotVisibleException, NoSuchElementException])\n>           webElement = wait.until(ec.presence_of_element_located((locatorByType, locatorValue)))\n\n..\\base\\BasePage.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"06f1601a03249b871a869e568e202fd0\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001F193972340>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF662742142+3514994]\nE       \t(No symbol) [0x00007FF662360CE2]\nE       \t(No symbol) [0x00007FF6622076AA]\nE       \t(No symbol) [0x00007FF662251860]\nE       \t(No symbol) [0x00007FF66225197C]\nE       \t(No symbol) [0x00007FF662294EE7]\nE       \t(No symbol) [0x00007FF66227602F]\nE       \t(No symbol) [0x00007FF6622928F6]\nE       \t(No symbol) [0x00007FF662275D93]\nE       \t(No symbol) [0x00007FF662244BDC]\nE       \t(No symbol) [0x00007FF662245C64]\nE       \tGetHandleVerifier [0x00007FF66276E16B+3695259]\nE       \tGetHandleVerifier [0x00007FF6627C6737+4057191]\nE       \tGetHandleVerifier [0x00007FF6627BE4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF6624904F9+689705]\nE       \t(No symbol) [0x00007FF66236C048]\nE       \t(No symbol) [0x00007FF662368044]\nE       \t(No symbol) [0x00007FF6623681C9]\nE       \t(No symbol) [0x00007FF6623588C4]\nE       \tBaseThreadInitThunk [0x00007FFC9EA7257D+29]\nE       \tRtlUserThreadStart [0x00007FFC9ED2AA58+40]\n\n..\\..\\..\\..\\python-selenium-venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <SeleniumFrameWork.pages.checkoutPage.Checkout object at 0x000001F1939A5B10>, locatorValue = 'finish', locatorType = 'id'\n\n    def clickOnElement(self, locatorValue, locatorType=\"id\"):\n        try:\n            locatorType = locatorType.lower()\n>           webElement = self.waitForElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <SeleniumFrameWork.pages.checkoutPage.Checkout object at 0x000001F1939A5B10>, locatorValue = 'finish', locatorType = 'id'\n\n    def waitForElement(self, locatorValue, locatorType=\"id\"):\n        webElement = None\n        try:\n            locatorType = locatorType.lower()\n            locatorByType = self.getLocatorType(locatorType)\n            wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                                 ignored_exceptions=[ElementNotVisibleException, NoSuchElementException])\n            webElement = wait.until(ec.presence_of_element_located((locatorByType, locatorValue)))\n            self.log.info(\"WebElement found with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n        except:\n            self.log.error(\n                \"WebElement not found with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n            print_stack()\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:79: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <SeleniumFrameWork.tests.test_checkout.CheckOut testMethod=test_ClickUserName>\n\n    @pytest.mark.run(order=29)\n    def test_ClickUserName(self):\n       self.cf.giveUserName()\n       time.sleep(5)\n       self.cf.givePassword()\n       time.sleep(5)\n       self.cf.clickOnLogin()\n       time.sleep(5)\n       self.cf.addtoCart()\n       time.sleep(5)\n       self.cf.openCart()\n       time.sleep(5)\n       self.cf.checkOut()\n       time.sleep(5)\n       self.cf.firstName()\n       time.sleep(5)\n       self.cf.lastName()\n       time.sleep(5)\n       self.cf.pinCode()\n       time.sleep(5)\n       self.bp.scrollTo(\"continue\")\n       self.bp.clickOnElement('continue','id')\n       time.sleep(5)\n>      self.cf.pressFinal()\n\ntest_checkout.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\checkoutPage.py:78: in pressFinal\n    self.clickOnElement(self._finish, 'id')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <SeleniumFrameWork.pages.checkoutPage.Checkout object at 0x000001F1939A5B10>, locatorValue = 'finish', locatorType = 'id'\n\n    def clickOnElement(self, locatorValue, locatorType=\"id\"):\n        try:\n            locatorType = locatorType.lower()\n            webElement = self.waitForElement(locatorValue, locatorType)\n            webElement.click()\n            self.log.info(\n                \"Clicked on WebElement with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n        except:\n            self.log.error(\n                \"Unable to Click on WebElement with locator value \" + locatorValue + \" using locatorType \" + locatorType)\n            print_stack()\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:93: AssertionError"}, "steps": [{"name": "entered username successfully", "status": "passed", "start": 1705399045034, "stop": 1705399045034}, {"name": "password have been successfully fetched ", "status": "passed", "start": 1705399050357, "stop": 1705399050357}, {"name": "clicked login button", "status": "passed", "start": 1705399055885, "stop": 1705399055885}, {"name": "the product is added to the cart successfully", "status": "passed", "start": 1705399061211, "stop": 1705399061211}, {"name": "checking the added product into the cart", "status": "passed", "start": 1705399066450, "stop": 1705399066450}, {"name": "verify checkout", "status": "passed", "start": 1705399071684, "stop": 1705399071684}, {"name": "enter buyers first name", "status": "passed", "start": 1705399077014, "stop": 1705399077014}, {"name": "enter buyers lastname", "status": "passed", "start": 1705399082358, "stop": 1705399082358}], "attachments": [{"name": "log", "source": "16a40d94-09f9-4a3e-be88-195a7d6c6cf0-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "327bee2f-4b9a-42c4-9ed2-ac009aa01531-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "ea6d05af-34a2-4c3f-986e-723323480915-attachment.txt", "type": "text/plain"}], "start": 1705399044705, "stop": 1705399124228, "uuid": "80201b23-776e-4801-8d86-1ad0e144c66a", "historyId": "d1990057ee0055a1214989e45a3dace8", "testCaseId": "d1990057ee0055a1214989e45a3dace8", "fullName": "TestSuite.CheckOut#test_ClickUserName", "labels": [{"name": "tag", "value": "run(order=29)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'beforeMethod')"}, {"name": "suite", "value": "TestSuite"}, {"name": "subSuite", "value": "CheckOut"}, {"name": "host", "value": "GESLLR0D3LS8"}, {"name": "thread", "value": "13732-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestSuite"}]}